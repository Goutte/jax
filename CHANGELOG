* 3.0.0 (Not Released) *

  * Jax now depends on railties, not on Rails proper.

  * `Jax.Framerate` model has been added, which can be used to accurately 
    measure framerate. Add an instance of it to `Jax.World` for a visual 
    chart, or just keep it in memory to query FPS for reporting.

  * GL-Matrix library updated to v2.2.0. NOTE: the matrix APIs have changed
    significantly, so check your code!

  * Basic testing instructions added to the testing guide (#73, #77, Antoine 
    Goutenoir)
  
  * Updated light generator to produce 3.0-compliant files (#78, #79, 
    Lutangar)

  * Added `Jax.Mesh.GeodesicSphere` (Antoine Goutenoir)

  * Added `Jax.Mesh.GeodesicSphereDual` (Antoine Goutenoir)

  * Added `Jax.Mesh.Icosahedron` (Antoine Goutenoir)

  * Added `mouse_rolled` event to controllers to handle mouse wheel events
    (#62, Lutangar)

  * Jax now leverages `jasmine-rails` as a dependency, helping to decouple 
    Jax from Jasmine internally. This should produce fewer Jasmine-related
    bugs in the future.

  * Resolved #81: Updated Jax sources to compile properly under latest
    CoffeeScript

  * Resolved #74, #72: updated Jax to play nicely with newest versions of 
    Jasmine.

  * Fixed `Jax.Mesh#vertices` to return vertex data



* 3.0.0 RC2 *

  * Resolved #71: Jax.Input now removes event listeners from _itself_ when it
    is instructed to stop listening to events.

  * The update interval has been removed and updates now execute at the start
    of each frame. Updates-per-second are no longer calculated when requested
    and requesting them will raise a deprecation error. Use
    `Jax.Context#getFramesPerSecond` for both frames and updates per second.

  * Minor internal optimizations by removing calls to `apply` where possible.

  * Gem size drastically reduced by omitting the Jax documentation from the
    package.

  * The `Jax.View` class has been removed. It used to wrap around the view
    functions. Now the view functions belong directly to their controllers,
    producing better performance in the form of less function call overhead
    per frame, and allowing you to access all instance variables that belong
    to your controller without having to jump through hacky hoops.

  * `Jax.Context` now gracefully handles empty renderer lists. The following
    code will behave as expected:

        new Jax.Context({canvas: canvasElement, renderers: []});

    The result is a context which instantiates controllers and receives input
    as usual, but does not render any result to the canvas element. Also, the
    `canvas` option may now be any element in the DOM, and is not restricted
    purely to `<canvas>` elements. This allows you to register Jax event
    listeners to any element in the DOM.

  * `Jax.Input.Mouse` can now programmatically perform "click" events like 
    so:

        context.mouse.trigger("click");
        context.mouse.trigger("click", {button: 1});

    This is **not** equivalent to a DOM click, but rather simulates a 
    "mousedown" event followed immediately by a "mouseup" event. (Jax 
    performs its own "click" detection, which is not new functionality.)

  * When a controller is selected from the controller list in the Jax dev
    suite, the canvas element will be programmatically given focus, allowing
    it to receive keyboard events immediately.

  * Fixed mouse coordinates, which were previously calculated incorrectly,
    resulting in unusable data in certain scenarios.

  * Made the update duration cap configurable. You can disable it entirely by
    setting `Jax.Context#clampTimechange` to any non-truthy value (`0`, 
    `false`, `null`, etc). The value defaults to `0.25`, or 250 ms.

  * Lowered the default resolution of `Jax.Mesh.Torus`, which was previously 
    producing WebGL warnings. Oops.

  * Resolved #66: Fixed some bugs in the material generator which were 
    causing it to produce invalid material files.



* 3.0.0 RC1 *

General:

  * Resolved #52: Made it possible to invoke `rails g jax:install` with just 
    `jax install`

  * Resolved #42: Deprecated WebGL wrapper methods, since they're no longer 
    helpful

  * Previous versions of Jax used a temporary WebGL context during 
    initialization; this has now been removed in favor of lazily loading the 
    relevant data.

  * Removed Jax.render_speed and corrected some small render bugs

  * Fixed framerate calculation


Model Loaders:
  * Added support for all forms of Stanford's PLY model format: ASCII,
    binary-big-endian, and binary-little-endian.


Context:

  * Contexts can now be initialized without a `canvas` element. They can
    also be initialized without WebGL support.
  * `Context#player` has been deprecated. It only had one property anyways:
    `camera`, which has been moved into `Context#activeCamera`.
  * `Context#activeCamera` has been added. Note that this is not a
    stand-alone instance of Jax.Camera: it is instead just a reference into
    `Jax.World#cameras[0]`.
    
    Note: the active camera will be reverted back to `Jax.World#cameras[0]`
    whenever a new controller is loaded.
  * Context now caps the update interval to 250ms between frames. This 
    prevents the models from performing massive update steps, which led to 
    errors if the context was suspended e.g. by browsing within a different 
    tab.

    
World:
  * Added an `ambientColor` property, which allows you to control the level 
    and color of ambient lighting in the virtual world. The default is
    `[0.05, 0.05, 0.05, 1]`, or "nearly-black". To alter this, you can
    assign the color in the traditional array notation, or you can use hex 
    codes. The following two examples are equivalent:

        @world.ambientColor = [1, 1, 1, 1] # red, green, blue, alpha
        @world.ambientColor = "#fff"       # 1-byte red, green, blue
        @world.ambientColor = "#ffff"      # 1-byte red, green, blue, alpha
        @world.ambientColor = "#ffffff"    # 2-byte red, green, blue
        @world.ambientColor = "#ffffffff"  # 2-byte red, green, blue, alpha
        
    Note that in the case of ambient color and light colors, the alpha 
    channel is not used for transparency, but rather as a scale: it is 
    multiplied against the red, green and blue channels.
    
  * A new `cameras` property has been added. It is an array that is 
    guaranteed to contain at least 1 instance of `Jax.Camera`. This allows 
    you to easily manage as many cameras as your world requires. To cause 
    the viewer to "look" through any particular camera, just assign it to
    `Jax.Context#activeCamera`. Example:
    
        @context.activeCamera = @world.cameras[0]
        # this will create 2 additional cameras, without altering the 
        # existing one(s)
        @world.cameras = 3
        @context.activeCamera = @world.cameras[1]
        
  * Split Jax.World#pickRegionalIndices into two phases, so that custom 
    picking implementations can still use Jax.World#parsePickData to process 
    pick data.
    
  * A global octree is now implemented to improve performance in large or 
    complicated scenes. You can set the `cull` attribute of a model or mesh 
    to `false` to prevent it being added to the octree. In that case, it's 
    rendered in the previous brute-force method. You can also pass
    `addToOctree: false` to Jax.World#addObject for the same effect:
    
        @world.addObject myObject, addToOctree: false

    
Models:
  * Models with `castShadow` set to `false` will not cast a shadow.
  - Models with `receiveShadow` set to `false` will not receive shadows cast 
    by other models.


Meshes:
  * More than 65535 vertices are now supported. There is no longer any 
    arbitrary limit on vertex or index count, except for client capabilities.
  * Improved data storage and management and streamlined binding of general 
    mesh data to GL contexts, resulting in a massive performance improvement.
  * Exposed mesh tangents and bitangents to the `init` method, allowing you 
    to pre-calculate them. If you use normal maps, doing this will 
    drastically improve load times because tangents take a long time to 
    calculate. The full signature is now:
      init: (vertices, colors, textureCoords,
             normals, vertexIndices, tangents, bitangents)
  * Tangent calculations have now been optimized somewhat, so models which 
    require them should load a bit faster.
  * If a mesh builder omits normals, tangents or bitangents, then they will 
    be automatically calculated, but only when they are actually needed by a 
    shader. They can also be explicitly recalculated at any time by calling 
    Jax.Mesh#recalculateNormals, Jax.Mesh#recalculateTangents, or
    Jax.Mesh#recalculateBitangents -- but these are expensive operations and 
    should be avoided where possible.
  * The `bounds` property of every mesh now includes a `radius` representing 
    the distance of the furthest vertex from the mesh's origin.


Materials:
  * Materials still consist of "layers". However, each layer executes in a 
    stand-alone environment, and does not have access to the variables 
    defined by another layer. This ensures greater compatability and 
    improves speed by excluding unnecessary iterations. Instance variables in
    any given layer are assigned by the material itself; if the material 
    instance doesn't know how to set instance variables, it will be up to 
    the code that actually uses the material to set appropriate variables.
  * Materials can now directly control how many render passes are required
    to complete them.
  * Materials can now return `false` from a `setVariables` call, which will 
    cause the pass not to be rendered. For example, if a light source is 
    disabled, the layer can return `false` to signify that the render pass 
    should be skipped.
  * Previously, to set the value of a shader variable, you would call (for 
    example):

        vars.set DiffuseColor: @material.color.diffuse

    This syntax encouraged arbitrary creation of useless objects, which must 
    then be garbage-collected, slowing down the JavaScript runtime. With the 
    new syntax, you can assign variable values directly to `vars` like so:

        vars.DiffuseColor = @material.color.diffuse

    This has resulted in much smoother performance.
  * Shadow maps have been added to the default materials, so that all 
    objects will cast and receive shadows by default. However, this does not 
    apply to materials created in Jax v2.x.
  * You can set the `pcf` option on any material to `false` to disable PCF  
    filtering of shadow maps. This improves rendering speed somewhat, at the 
    cost of more pixelated results.
  * Materials can now define a `prepare` method which will be called prior 
    to doing any rendering. This way materials can maintain state between 
    frames, such as updating a framebuffer.
    

Lights:
  * During illumination, diffuse and specular layers will cause a rendering 
    pass to be skipped entirely if the corresponding light is too far away 
    to have an effect on the scene.
    

Shadows:
  * Shadow maps now test which objects will be illuminated, and omit those 
    that are too far, resulting in faster render times.
  * Shadow maps now actively maintain their own frustums based on the size 
    of the scene and the effective range of the light source, producing the 
    best possible quality of shadow.
  * Shadow maps now perform 3x3 PCF filtering for a better quality shadow. 
    This can be disabled by setting the `pcf` option in the corresponding 
    material to `false`.
  * Jax.ShadowMap#isIlluminated can tell you whether an object is in light 
    or shadow (but this is an expensive operation).
  

Shaders:
  Precompile directives:
    * export(type, name, expr)
      * executes the expression and exports it, making it available to be 
        imported by another shader. See `import` for examples.
      
    * import(name, expr)
      * consecutively evaluates `expr` in the context of each variable 
        exported with the given name. Example:
        
          float y = 0.0;
          export(float, x, 1.0);
          export(float, x, 2.0);
          import(x, y += x);
          // y == 3.0
          
        Note: if no values were previously exported with a particular name, 
        then the corresponding `import` directive will be ignored and the 
        value of `y` remains unchanged.
          
    * cache(type, name) { block }
      * Declares a global variable with the given type and name, and then 
        evaluates the attached block of code only if no other block has been 
        evaluated in the past. Example:
        
          cache(float, x) { x = 5.0;  } // x == 5.0
          cache(float, x) { x = 10.0; } // x == 5.0
          
        Caching is helpful when you need to perform some operation that 
        another shader may need to perform again, such as renormalizing a 
        vertex normal. In trivial cases, the compiler may optimize 
        redundancy away, but this is compiler-specific, while the `cache`  
        directive will work across all compilers and does not care how 
        complicated the block of code becomes.
        
        Note: you should not use `cache` within branches such as if-
        conditions unless you can guarantee that all shaders which use the 
        cached variable will also operate under identical conditions.
   

Perlin noise:
  * Consolidated noise algorithm to use a single texture buffer instead of 3 
    separate texture buffers with no loss in performance, special thanks to 
    Stefan Gustavson.


Default material library:

  REMOVALS:
    * the "Basic" layer has been removed and its functionality is now split 
      into 2 other layers: "Position" and "VertexColor".
    * the "Lighting" layer has been removed. It was not correct, anyway. 
      Lighting is now correctly calculated using the Lambertian diffuse 
      algorithm and the Phong specular algorithm, producing highly accurate 
      results, and attenuated in a separate layer.

  ADDITIONS:
    * Added the "Position" layer, which sets the vertex position according 
      to the current ModelViewProjection matrix.
    * Added the "VertexColor" layer, which sets the vertex colors according 
      to the mesh vertex color attributes, which default to opaque white.
    * Added the "WorldAmbient" layer, which multiplies the color by the 
      current world ambient color, influenced by the material's ambient 
      intensity
    * Added the "LightAmbient" layer, which applies the ambient component of 
      individual light sources.
    * Added the "LambertDiffuse" layer, which applies the diffuse color on 
      illumination (non-ambient) passes.
    * Added the "PhongSpecular" layer, which applies specular highlights on 
      illumination (non-ambient) passes.
    * Added the "Attenuation" layer, which applies lighting attenuation on 
      illumination (non-ambient) passes.
    * Added the "GammaCorrection" layer. This layer is not used by default, 
      but can be used as a post-processing step to greatly improve the 
      lighting of the scene. Note that it may not play nicely with textures 
      if the textures are already gamma-correct. (If you pulled textures off 
      of Google or used a digital camera to take pictures, and didn't take 
      steps to linearize the textures, then they are likely already gamma-
      correct.)
    * Added the "ClampColor" layer, which just clamps gl_FragColor to the 
      range [0, 1].
    * Added a nice single-pass wireframe layer. Just add the layer to your 
      material and you're done!
    * Extracted the paraboloid calculations from the "Paraboloid" layer and 
      placed them in `shaders/functions/paraboloid.glsl`. The function 
      `mapToParaboloid` can be used to project any vertex into a paraboloid, 
      making it easier to do parabolic environment mapping.
    
    
Specs:
  * Unit tests previously relied on a global `SPEC_CONTEXT` object 
    representing an automatic instantiation of `Jax.Context`. Now, `@context`
    and `@world` have both been exposed to each spec. Note that for 
    compatibility's sake, `SPEC_CONTEXT` is still available, and represents 
    the same object as `@context`. The `SPEC_CONTEXT` object has not been 
    deprecated, but it will be in the near future, so developers are
    encouraged to test against `@context` instead.
      


* 2.0.12 *

* "Fix" accuracy of Jax.uptime
  Please see:
  https://github.com/sinisterchipmunk/jax/commit/bf225524edb1a1cc9c7c42a3214b0b5b40aa2069



* 2.0.11 *

* Use a different shader import name

  Jax generates GLSL macros to prevent importing one shader
  into another more than once.
  
  Apparently, use of double underscores ("__") in macro names
  is reserved in GLSL, even though it seems to work on most
  hardware.
  
  An upcoming release of Chrome has a rewritten ANGLE shader
  preprocessor which now enforces this rule, so it's time to
  fix Jax -- before the new Chrome goes mainstream.
  
  Firefox will be receiving this update shortly, as well, and
  it applies to all operating systems (not just Windows), so
  this is a big problem -- but thankfully, an easy fix.



* 2.0.10 *

* Resolved an issue with picking where depth testing has failed. Picking would
  previously return the wrong object.
  


* 2.0.9 *

* Resolved issue #59: Jax.Mesh.Cube should update its data when any of its faces change


* 2.0.8 *

* Resolved issue #55: bin/jax should not fail within spaced paths



* 2.0.7 *

* Resolved issue #48: Unable to reliably pick any object not explicitly added to World

* Resolved issue #54: Default views can't be overridden



* 2.0.6 *

* Resolved issue #30: `Jax.Framebuffer#getTexture(context, index)` now returns texture
  with index 0 if index was not given.

* Resolved issue #43: Plugin models appear after app models in load order.

* Minor improvements to `Jax.Framebuffer`

* `Jax.Texture` data type can now be specified, for example, in apps which make use of
  the OES_texture_float extension
  
* Resolved issue #38: `Jax.RouteSet` now underscores CamelCase routes.

* `Jax.World#addLightSource()` now returns the light source that was added, just like
  `Jax.World#addObject()` returns the object that was added.
  
* Resolved issue #46: Render errors when shadows are disabled, but shadowmapping is not

* Resolved issue #47: Removing an object from the scene causes infinite recursion in light
  manager



* 2.0.5 *

* Setting `shadowcaster` to `false` for a light source now has the expected result: it
  disables all shadow mapping for that light, resulting in a significant performance boost.
  
* Updated gl-matrix to the latest version (v1.1), and updated Jax to take advantage of
  it, resulting in a moderate performance boost.
  
* Light sources no longer generate shadow maps for, nor cast shadows upon, objects that
  are beyond their range. This is based on the light's intensity (its ambient,
  specular and diffuse color components), and its attenuation coefficients.
  
* Fixed `Jax.Camera#unproject` -- it had some stupid errors that kept it from working
  at all. This method had also somehow crept into Jax without any tests; it is now
  appropriately tested, of course.



* 2.0.4 *

* Jax was not differentiating between development mode and production mode, resulting
  in production apps that took performance hits incurred by logging debug information.

* `Jax.VERSION` now works properly, by embedding the rubygem version as intended



* 2.0.3 *

* Resolved a 1280 GL_INVALID_OPERATION error for most Jax applications running under Safari.
  See https://github.com/sinisterchipmunk/jax/issues/31



* 2.0.2 *

* Fixed the shader generator, which was generating deprecated (and not working) code.



* 2.0.1 *

* Implemented missing `Jax.Geometry.Line#contains` method.

* Fixed line intersection test, when `vec3` is used as a receiver for point of intersection.

* Built-in resources have been moved to their respective `.resource` files. Same with
  shaders. This should make overriding them work more reliably, and remove redundant
  requests for built-in shaders and resources.



* 2.0.0 *

* Integrates cleanly with Ruby on Rails applications. Add `jax` to the bundle, then run:
    jax g install

* Internal development server is now a Rails engine, so that it can run stand-alone (for
  non-Rails apps) as well as be mounted into Rails apps directly.
  
* Generators now inherit from `Rails::Generators::Base`

* CoffeeScript is now supported, and CS files will be generated by default if the CS gem
  is present.

* Files are now created in `app/assets/jax/` instead of just `app/` in order to gain the
  benefits of the Rails asset pipeline.
  
* The `jax package` command has been deprecated in favor of `rake assets:precompile`.

* Packager will now minify all JavaScript code, if possible.

* The `public/javascripts/jax.js` file has been deprecated. Jax source files are now served
  directly from within the rubygem.
  
* The `rake jax:update` task has been removed. It is no longer needed.

* Removed `config/routes.rb` from non-Rails apps. Instead, controllers map themselves
  automatically on the JS side when defined, and their actions are looked up dynamically.

* Controller generator now generates an `index` action by default.
  
* Helper files are no longer generated by the controller generator since they usually weren't
  tightly coupled to their corresponding controllers. A helper generator has been added,
  instead.
  
* Added a material viewer to the dev suite, so that materials can be previewed in isolation

* Removed a runtime dependency on Minitar. `Gem::Package` is now used for tar and untar
  operations instead.



* 1.1.1 *

* Mouse events are scaled in relation to the real canvas size, regardless of CSS styling.
  This means you can always deal with mouse position in terms of the canvas +width+ and
  +height+ attributes, without worrying about the actual pixel size on the client machine.

* Resolved an issue which caused picking to fail due to using string values for shader
  names instead of instances of Jax.Shader.

* If Jax.Camera#fixedYawAxis is enabled, the Jax.Camera#setDirection method will now honor
  that, and maintain the fixed yaw axis as expected.

* Added Jax.Geometry.Line, which is used in intersection tests.

* Significantly improved Jax.Geometry.Plane, and added 6 new intersection tests:
  * Jax.Geometry.Line
    * intersectLineSegment
  * Jax.Geometry.Plane
    * intersectRay
    * intersectPlane
    * intersectTriangle
    * intersectLineSegment
  * Jax.Geometry.Triangle
    * intersectTriangle with an optional argument to capture the point of intersection

* Further optimized Jax.Geometry.Triangle and friends

* Jax now renders meshes consisting of GL_POINTS properly.

* Light manager now reverts the blend mode back to alpha blending, instead of leaving it
  set to additive blending.

* Reordered render passes so that unlit objects are rendered _after_ lit objects.



* 1.1.0 *

* If a mesh #init method does not specify any vertex normals for the mesh, and
  Jax.Mesh#getNormalBuffer() is called, Jax.Mesh will automatically calculate
  vertex normals for the mesh. This is a relatively expensive operation (though
  only for the first frame or so), so you should still strive to give your own set
  of normals when possible.

* Jax.Mesh#setColor now accepts the color as a single RGBA array or as 4 separate R, G, B, A
  arguments.

* Added Jax.Geometry.Triangle, and exposed Jax.Mesh#getTriangles(). This class comes
  complete with triangle/triangle, triangle/ray, triangle/sphere, and triangle/point
  intersection tests! See API documentation. Jax.Geometry.Triangle can also return
  its face normal.
  
* Added Jax.DataRegion, Jax.DataSegment, and Jax.DataBuffer, all of which are now used
  internally by Jax.Mesh to manage its mesh data. This has cut memory usage for any
  given Jax.Mesh in half, makes the additional memory footprint of Jax.Geometry.Triangle
  negligible, and even nets a minor performance gain. Moreover, altering vertex data
  in the Jax.Mesh is now immediately reflected in Jax.Geometry.Triangle and
  Jax.Geometry.Plane, since they are sharing the same region of memory.
  
* Made most instance methods of Jax.Geometry.Plane faster and more memory efficient. Also
  altered Jax.Geometry.Plane to take advantage of Jax.DataSegment for further memory gains.

* Exposed Jax.Mesh#validate(), which makes sure the mesh has been built and builds it
  immediately if it hasn't, or if it is out of date.

* Thoroughly documented all Jax-specific extensions to the glMatrix library.

* Exposed and improved Jax.Mesh#getBounds() to calculate an axis-aligned bounding box
  (AABB) in object space, and to handle meshes with no vertices (in which case all values
  are set to zero).

* Added lib/**/*.js to the generated jasmine.yml file. (New applications only.)

* Exposed Jax.Camera#frustum to the API. Improved Jax.Frustum and thoroughly documented
  its use.

* Vastly simplified usage of built-in Perlin noise. Replace all previous code with:

    Jax.noise.bind(context, uniforms);
    
  Previous code is still compatible, but should be considered deprecated.
  
* Helpers can optionally be defined as arrays, rather than as functions which return
  arrays. For example, the following two lines are equivalent to one another:
  
    helpers: [ UserInputHelper ]
    helpers: function() { return [ UserInputHelper]; }
    
  This addition is purely to reduce typing. Use the old, function-based approach to defer
  execution until runtime; use the array-based approach if you don't care.

* Jax.Camera now uses quaternions instead of calculating the transform matrix directly.
  This nets some potential performance improvements, but since the matrix still has to
  eventually be calculated, it's more for internal efficiency and code maintenence than
  anything. Using quaternions does significantly reduce the Jax.Camera memory footprint,
  however.
  
* Jax.Camera now uses a fixed yaw axis by default. Use Jax.Camera#setFixedYawAxis(false)
  to disable. The new default represents the standard camera orientation, as in first-person
  and third-person demos. Disabling fixed yaw axis will result in a more "flight simulator"
  type of camera.

* Some minor movement-related bugfixes for Jax.Camera.

* Renamed Jax.IDENTITY_MATRIX to mat4.IDENTITY for clarity and consistency.

* Temporarily disabled calls to Jax.Context#checkForRenderErrors() in development under
  Chrome, because the calls have proven far too detrimental to performance. When the
  issue is fixed in Chrome, I'll re-enable this. In the meantime, do performance testing
  in Chrome, but expect an overall more robust development cycle using Firefox.

* App generator: added a default but customizable stylesheet and index.html used when
  packaging apps. Affects new applications only.

* Jax JavaScript library is no longer minified; this is left for developers to do after
  packaging an application for production. This change makes it much simpler to track
  errors in the field. May consider auto-minifying the entire package when
  `rake package` is executed, but I'm not ready to do that yet.
  
* New error handling API lets developers hook directly into (and recover gracefully
  from) otherwise catastrophic errors
  
* Developers can hook into "webgl not supported" errors to customize the framework's
  response. By default, Jax redirects to an error page as per v1.0.0.

* Added Rails as a dependency; Jax now internally takes advantage of Railtie
  to implement a highly modular application structure; Jax::Plugin and
  Jax::Application both inherit from Railtie. This is not to be confused with
  support for or integration with Ruby on Rails.
  
* Controller generator now accepts the `--root` option to automatically make it the
  root controller
  
* Improved the light source API so that developers can replace this:
      this.world.addLightSource(LightSource.find("sun"));
    with:
      this.world.addLightSource("sun");

* Jax now supports both Ruby 1.9.2 and Ruby 1.8.7.

* Added a benchmark script. Internal use only, but it also demonstrates a bare-bones,
  JavaScript-only [no Ruby counterpart] Jax application. Check it out:
  https://github.com/sinisterchipmunk/jax/blob/1-1-stable/spec/benchmark.htm

* Tons of documentation for the JavaScript API

* Plugin generator to create new plugins

* Plugin manager to search for, install, publish and remove plugins

* Plugin Repository (http://plugins.jaxgl.com)

* Plugin Guide (http://guides.jaxgl.com/plugins.html)

* Jax.Context now Unregisters event handlers upon disposal

* If a Jax.Context has been disposed, it will no longer render or update.


* 1.0.1 *

* If a render error is encountered while generating shadow maps, the corresponding
  light source has its +shadowcaster+ attribute set to false. This disables all
  shadow maps (both their generation and usage) for the offending light source. The
  same sequence also logs a message to the error console, but does not result in
  a fatal error. Note that this condition is only triggered by a hard error during
  shadowmap generation; soft errors like drastically low framerates are not handled.

* Driver bug workaround: avoid early returning from void functions. Apparently some
  drivers crash when void functions encounter a `return` statement. See issue #20:
  https://github.com/sinisterchipmunk/jax/issues/20


* 1.0.0 *

* First major-version release, baby!

* `rake build` with Jax rakefile now minifies jax.js before packaging so that
  apps generated with `jax new appname` use minified jax.
  
* Jax.Mesh.Plane now includes texture coordinates. The range is [0..1] regardless
  of size of plane or number of segments, so use texture scaling like you would for
  any other mesh if a wider range is required.
  
* Lighting shader now takes options to override the defaults. This makes it easier
  to extend with other shaders -- useful for shaders that alter or replace the
  lighting model, or for shaders that just rely on the same uniforms.



* 0.0.0.10 *

* Excluded worthless files from gemsec and reduced size of gem from 9mb to 100k!



* 0.0.0.9 *

* Minor bugfixes for Jax.Util.colorize() and Jax.Util.Vectorize(). Specifically,
  fixes involved correctly processing 3D colors and 2D vectors.

* Switch shader test generator to use SPEC_CONTEXT, which is now defined in the
  spec_layout and helper files for new applicats. This isn't *immediately*
  app-breaking but you should regenerate these files anyways or the next time you
  generate a shader will cause a bad day.

* List enum name next to error number for clarity when render errors occur.

* Abstract test suite setup into a separate helper file

* Add a global SPEC_CONTEXT so users don't have to manually create a new context for
  each spec
  
* Specs run on a completely separate context so that they don't cause issues with
  the visual tests



* 0.0.0.8 *

* Added +Jax.Shaders.max_vertex_textures+ which tracks the value of
  GL_MAX_VERTEX_TEXTURE_UNITS so you can design shaders that Just Work.

* Exposed +shader_type+ to the EJS template so you can determine whether a shader's
  source is for a vertex or fragment shader. (It's a string equal to either 'vertex'
  or 'fragment'.) Useful for 'common' code, even more useful for reusable function
  libraries. ;)
  
* Modified Jax built-in noise functions to utilize the above in order to quietly
  fall back to the no-texture-lookup noise implementation by Ian McEwan:
  https://github.com/ashima/webgl-noise . This implementation is considerably slower
  than the VTL one (my FPS on Mac drops from ~100 to ~60 for the 'blob' demo), so
  it is better used as a secondary noise than as a primary.
  
* Renamed the VTL 'noise' function to 'cnoise' to avoid ambiguity in programs. Use
  'cnoise' or 'snoise'.



* 0.0.0.7 *

* Fixed a bug which could cause applications to fail in production (after running
  `rake jax:package`). It was due to the packager adding helper files in the wrong
  order.



* 0.0.0.6 *

* Introduced Jax.uptime, a running total of number of seconds since the Jax subsystem
  was _loaded_ (not necessarily instantiated). This is now used in place of various
  timers in Jax, e.g. for calculating the +timechange+ argument to #update methods.

* Added 'picking' support via Jax.World#pick(x,y); Jax.World#pickIndex(x,y);
  Jax.World#pickRegion(x1,y1, x2,y2); Jax.World#pickRegionalIndices(x1,y1, x2,y2).
  This is the last milestone prior to v1.0 release.

* Lots of new JavaScript API documentation

* Renamed Jax.Camera#getModelViewMatrix() to Jax.Camera#getTransformationMatrix().
  The latter is more accurate. THIS WILL BREAK EXISTING APPS but since Jax is still
  considered pre-release I'm not taking the extra step to deprecate it.

* Added Jax version number and framerate counter to spec layouts

* Added perlin noise example to /spec/example_app

* Added aliases for Math.radToDeg / Math.rad2deg and Math.degToRad / Math.deg2rad



* 0.0.0.5 *

* Jax now checks JS version against gem version and reports on mismatches

* Perlin noise functions added -- just do this in your shader:
  //= require "functions/noise"

* Split 'paraboloid-depthmap' shader into 2 separate shaders: 'paraboloid' and 'depthmap'
  This makes it possible to reuse paraboloids for environment mapping.

* Shader dependencies are now loaded via Jax.shader_load_paths, which can be multiple
  different directories (e.g. Jax builtin + app/shaders) This makes functions used by
  Jax available for reuse in custom shaders.

* Added CHANGELOG. :)
